// <auto-generated />
using System;
using FisherTournament.Infrastracture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FisherTournament.Infrastracture.Persistence.Migrations
{
    [DbContext(typeof(TournamentFisherDbContext))]
    partial class TournamentFisherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("FisherTournament.Domain.CompetitionAggregate.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDateTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Competitions", (string)null);
                });

            modelBuilder.Entity("FisherTournament.Domain.FisherAggregate.Fisher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Fishers", (string)null);
                });

            modelBuilder.Entity("FisherTournament.Domain.TournamentAggregate.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("FisherTournament.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FisherTournament.Domain.CompetitionAggregate.Competition", b =>
                {
                    b.HasOne("FisherTournament.Domain.TournamentAggregate.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("FisherTournament.Domain.CompetitionAggregate.Entities.CompetitionParticipation", "Participations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("CompetitionId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("FisherId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("TotalScore")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id", "CompetitionId");

                            b1.HasIndex("CompetitionId");

                            b1.HasIndex("FisherId");

                            b1.ToTable("CompetitionParticipations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CompetitionId");

                            b1.HasOne("FisherTournament.Domain.FisherAggregate.Fisher", null)
                                .WithMany()
                                .HasForeignKey("FisherId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.OwnsMany("FisherTournament.Domain.CompetitionAggregate.Entities.FishCaught", "FishCaught", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("CompetitionParticipationId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<Guid>("CompetitionId")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("FisherId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("Score")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("Id", "CompetitionParticipationId", "CompetitionId");

                                    b2.HasIndex("FisherId");

                                    b2.HasIndex("CompetitionParticipationId", "CompetitionId");

                                    b2.ToTable("CompetitionParticipationFishCaught", (string)null);

                                    b2.HasOne("FisherTournament.Domain.FisherAggregate.Fisher", null)
                                        .WithMany()
                                        .HasForeignKey("FisherId")
                                        .OnDelete(DeleteBehavior.NoAction)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("CompetitionParticipationId", "CompetitionId");
                                });

                            b1.Navigation("FishCaught");
                        });

                    b.OwnsOne("FisherTournament.Domain.CompetitionAggregate.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("CompetitionId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Place")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompetitionId");

                            b1.ToTable("Competitions");

                            b1.WithOwner()
                                .HasForeignKey("CompetitionId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("FisherTournament.Domain.FisherAggregate.Fisher", b =>
                {
                    b.HasOne("FisherTournament.Domain.UserAggregate.User", null)
                        .WithOne()
                        .HasForeignKey("FisherTournament.Domain.FisherAggregate.Fisher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FisherTournament.Domain.TournamentAggregate.Tournament", b =>
                {
                    b.OwnsMany("FisherTournament.Domain.CompetitionAggregate.ValueObjects.CompetitionId", "CompetitionsIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Value")
                                .HasColumnType("TEXT")
                                .HasColumnName("CompetitionId");

                            b1.HasKey("Id");

                            b1.HasIndex("TournamentId");

                            b1.ToTable("TournamentCompetitionsIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.OwnsMany("FisherTournament.Domain.TournamentAggregate.Entities.TournamentInscription", "Inscriptions", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("TournamentId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("FisherId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id", "TournamentId");

                            b1.HasIndex("FisherId");

                            b1.HasIndex("TournamentId");

                            b1.ToTable("TournamentInscription");

                            b1.HasOne("FisherTournament.Domain.FisherAggregate.Fisher", null)
                                .WithMany()
                                .HasForeignKey("FisherId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.Navigation("CompetitionsIds");

                    b.Navigation("Inscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
