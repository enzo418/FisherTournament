@page "/fisher/{FisherId}"
@using FisherTournament.Application.Fishers.Commands.EditFisher;
@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Contracts.Fishers;
@using FisherTournament.Domain.FisherAggregate.ValueObjects;
@using System.Globalization;

@inject NavigationManager _nav
@inject ISender _sender
@inject IMapper _mapper
@inject IToastService _toastService
@inject IJSRuntime JSRuntime

<div class="px-4" style="height: 80%">
    <h1 class="page-title">Edit Fisher</h1>

    <EditForm EditContext="@editContext" OnSubmit="@Submit" class="relative h-full">
        <div class="flex justify-center gap-20 pt-7">
            <div class="flex flex-col gap-10 justify-normal">
                <div>
                    <span class="text-sm">Personal Information</span>
                    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation" />
                </div>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value="@Model.FirstName" Required="true">
                        First Name <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.FirstName" />
                </p>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value="@Model.LastName" Required="true">
                        Last Name <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.LastName" />
                </p>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value="@(Model.DNI)" Required="true">
                        DNI <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.DNI" />
                </p>
            </div>

            <div class="flex flex-col gap-10 justify-normal">
                <div>
                    <span class="text-sm">Optional</span>
                    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation" />
                </div>

                <p>
                    <FluentTextField AutoComplete="off" @bind-Value=date Required="false" Placeholder="01/12/1997"
                                     Pattern="^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\d{4}$">
                        @* <FluentIcon Name="@FluentIcons.Calendar" Slot="start" Size="@IconSize.Size20"
                        Variant=IconVariant.Regular Color="Color.Neutral" /> *@
                        Date of Birth
                    </FluentTextField>
                </p>
            </div>
        </div>

        <div class="absolute bottom-0 m-auto flex columns-2 gap-28 w-full place-content-center">
            <FluentButton Appearance="Appearance.Stealth" @onclick=OnCancel>Cancel</FluentButton>
            <FluentButton Type=ButtonType.Submit Appearance="Appearance.Accent" Disabled=!editContext!.IsModified()>Save</FluentButton>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string FisherId { get; set; } = null!;

    private string? _fisherId;

    string? date = "";
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private EditFisherRequest Model { get; set; } = null!;

    private bool _shouldExit = false;

    private bool _sending = false;

    protected override async Task OnInitializedAsync()
    {
        var query = await _sender.Send(new GetFisherQuery(FisherId));

        if (query.IsError)
        {
            _toastService.ShowError($"Fisher with id {FisherId} not found");
            _shouldExit = true;
        }

        _fisherId = query.Value.Id;

        Model = new(query.Value.FirstName, query.Value.LastName, query.Value.DNI);
        editContext = new(Model);
        messageStore = new(editContext);

        editContext.MarkAsUnmodified();
    }

    protected override void OnAfterRender(bool _)
    {
        if (_shouldExit) _nav.NavigateTo("/404");
    }

    private async void OnCancel()
    {
        await JSRuntime.GoBack();
    }

    private async Task Submit()
    {
        if (_sending) return;

        _sending = true;

        var mapped = _mapper.Map<EditFisherCommand>((_fisherId, Model));
        var response = _sender.Send(mapped);

        if (response.Result.IsError)
        {
            editContext?.AddValidationErrors(response.Result.Errors, messageStore, Model);
        } else
        {
            _toastService.ShowSuccess($"Edited successfully");
            await JSRuntime.GoBack();
        }

        _sending = false;
    }
}