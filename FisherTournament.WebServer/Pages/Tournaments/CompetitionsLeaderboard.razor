@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard/{CompetitionId}"
@using FisherTournament.Application.Competitions.Queries.GetCompetition;
@using FisherTournament.Application.Competitions.Queries.GetLeaderBoard;
@using FisherTournament.Application.Competitions.Queries.GetLeaderboardItemDetails;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.WebServer.Services.ExportLeaderboard;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using FisherTournament.WebServer.Pages.Tournaments.Dialog;
@using System.Diagnostics;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject ExportLeaderboardService _exportService
@inject ILogger<CompetitionsLeaderboard> _logger

<h1 class="page-title-no-pt">Leaderboard for <span style="color: var(--accent-fill-rest);">round N° @competition.N</span></h1>

<div class="mt-7 mb-7 flex flex-row w-full justify-between items-end">
    <div class="flex flex-row gap-x-2">
        <div>
            <FluentSelect Items=_categories
                          OptionText="@(i => i.Name)"
                          OptionValue="@(i => i.Id)"
            @bind-Value="@_selectedCategoryId">
                <LabelTemplate>
                    Category
                </LabelTemplate>
            </FluentSelect>
        </div>

        <FluentDivider Orientation="Orientation.Vertical" />

        <ScrollerGoToCompetition Class="ml-3" TournamentId=@TournamentId />
    </div>


    <FluentButton IconStart="@(new Icons.Regular.Size16.Share())"
                  OnClick="ExportLeaderboard"
                  Appearance="Appearance.Outline">Export</FluentButton>
</div>

<CompetitionLeaderboardList CategoryId="@_selectedCategoryId" OnCategoriesChanged=@OnCategoriesChanged CompetitionId=@CompetitionId />


@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    [Parameter]
    public string CompetitionId { get; set; } = null!;

    private bool _openExport = false;

    List<(string Id, string Name)> _categories = new();

    string _selectedCategoryId = "";

    GetCompetitionQueryResponse competition = default!;

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        await GetCompetition();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldExit) _js.GoBack();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCompetition();
    }

    public void OnCategoriesChanged(List<(string Id, string Name)> cats)
    {
        _categories = cats;

        if (string.IsNullOrEmpty(_selectedCategoryId))
        {
            if (cats.Any(c => c.Name == "General"))
            {
                _selectedCategoryId = cats.First(c => c.Name == "General").Id;
            } else _selectedCategoryId = cats.First().Id;
        } else if (!cats.Any(c => c.Id == _selectedCategoryId))
        {
            _selectedCategoryId = cats.First().Id;
        }

        StateHasChanged();
    }

    async Task GetCompetition()
    {
        var competitionQuery = new GetCompetitionQuery(CompetitionId);
        var competitionRes = await _sender.Send(competitionQuery);

        if (competitionRes.IsError)
        {
            _toastService.ShowErrors(competitionRes.Errors);
            shouldExit = true;
        } else
        {
            competition = competitionRes.Value;
        }
    }

    string? GetCurrentCategoryName()
    {
        if (_categories.Any(p => p.Id == _selectedCategoryId))
        {
            return _categories.First(p => p.Id == _selectedCategoryId).Name;
        }

        return null;
    }

    void ExportLeaderboard()
    {
        _toastService.ShowWarning("Cannot export, it's a demo.");
    }
}
