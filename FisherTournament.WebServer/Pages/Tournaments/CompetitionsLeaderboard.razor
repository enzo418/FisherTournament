@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard/{CompetitionId}"
@using FisherTournament.Application.Competitions.Queries.GetCompetition;
@using FisherTournament.Application.Competitions.Queries.GetLeaderBoard;
@using FisherTournament.Application.Competitions.Queries.GetLeaderboardItemDetails;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.WebServer.Services.ExportLeaderboard;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using FisherTournament.WebServer.Pages.Tournaments.Dialog;

@implements IDisposable

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IDialogService _dialogService
@inject ExportLeaderboardService _exportService
@inject LeaderboardNotificationService _leaderboardNotificationService
@inject ILogger<CompetitionsLeaderboard> _logger

<h1 class="page-title-no-pt">Tabla de posiciones de la <span style="color: var(--accent-fill-rest);">competencia N° @competition.N</span></h1>

<div class="mt-7 mb-7 flex flex-row w-full justify-between items-end">
    <div>
        <FluentSelect Items=_categories
                      OptionText="@(i => i.Name)"
                      OptionValue="@(i => i.Id)"
                        @bind-Value="@_selectedCategoryId"
                        @bind-Value:after=SearchAsync>
            <LabelTemplate>
                Categoría
            </LabelTemplate>
        </FluentSelect>
    </div>
    

    <FluentButton IconStart="@(new Icons.Regular.Size16.Share())" OnClick="ExportLeaderboard" Appearance="Appearance.Outline">Exportar</FluentButton>
</div>

<FluentDataGrid Items="@positions" Virtualize="true" ItemSize="50" GridTemplateColumns=@(_selectedCategoryId == "General" ? "0.2fr 0.6fr 0.3fr 0.5fr" : "0.2fr 0.6fr 0.3fr 0.4fr 0.5fr")>
    <ChildContent>
        <PropertyColumn Title="Posición" Property="@(c => c.Position)" />

        <PropertyColumn Title="Nombre" Property="@(c => c.Name)" />

        <PropertyColumn Title="Suma de Puntos" Property="@(c => c.TotalScore)" />

        @* <PropertyColumn Title="Desempate" Property="@(c => c.TieBreakingReason)" /> *@
        @if (_selectedCategoryId != "General")
        {
            <TemplateColumn Title="Desempate">
                @if (context.TieBreakingReason is not null)
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <span>@context.TieBreakingReason</span>                
                        <FluentIcon Id="@context.FisherId" Icon="Icons.Regular.Size16.Info" />

                        <FluentTooltip Anchor="@context.FisherId">
                            M/P = Por mayor pieza
                            <br />
                            M/NP = Por la mayor N-ésima pieza
                            <br />
                            D = Aleatorio
                        </FluentTooltip>
                    </FluentStack>
                }
            </TemplateColumn>
        }

        <TemplateColumn Title="Acciones" Align="@Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size24.Info())"
                          Appearance="Appearance.Stealth"
                          OnClick="@(() => OpenDetails(context))"> 
                          Detalles
            </FluentButton>
        </TemplateColumn>
    </ChildContent>

    <EmptyContent>
        <div Style="min-height: 300px;" class="flex items-center empty-content pt-2">
            <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
            &nbsp; No hay posiciones registradas para esta competición
        </div>
    </EmptyContent>
</FluentDataGrid>

@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    [Parameter]
    public string CompetitionId { get; set; } = null!;

    private bool _openExport = false;

    public record struct Category(string Id, string Name);
    List<Category> _categories = new();

    IQueryable<LeaderBoardItem> positions = new List<LeaderBoardItem>().AsQueryable();

    private List<LeaderBoardCategory> lastQuery = new();

    string _selectedCategoryId = "";

    GetCompetitionQueryResponse competition = default!;

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        // Get competition
        var competitionQuery = new GetCompetitionQuery(CompetitionId);
        var competitionRes = await _sender.Send(competitionQuery);

        if (competitionRes.IsError)
        {
            _toastService.ShowErrors(competitionRes.Errors);
            shouldExit = true;
        } else
        {
            competition = competitionRes.Value;
        }

        await SearchAsync();

        _leaderboardNotificationService.OnLeaderboardWasUpdated += OnLeaderboardUpdated;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldExit) _js.GoBack();
    }

    async Task SearchAsync()
    {
        var query = new GetCompetitionLeaderBoardQuery(CompetitionId);
        var res = await _sender.Send(query);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
        } else
        {
            _categories = res.Value.Select(c => new Category(c.Id, c.Name)).ToList();

            lastQuery = res.Value.ToList();

            if (string.IsNullOrEmpty(_selectedCategoryId))
            {
                if (_categories.Any(c => c.Name == "General"))
                {
                    _selectedCategoryId = _categories.First(c => c.Name == "General").Id;
                } else _selectedCategoryId = _categories.First().Id;                
            }

            if (res.Value.Any(p => p.Id == _selectedCategoryId))
            {
                positions = res.Value.First(p => p.Id == _selectedCategoryId).LeaderBoard.AsQueryable();
            }
        }
    }

    async Task OpenDetails(LeaderBoardItem position)
    {
        var dialogData = (CompetitionId, position);
        var dialog = await _dialogService.ShowDialogAsync<CompetitionLeaderboardItemDetails>(dialogData, new DialogParameters()
        {
            Width = "90%",
            PrimaryAction = null,
            SecondaryAction = null
        });
    }

    string? GetCurrentCategoryName()
    {
        if (_categories.Any(p => p.Id == _selectedCategoryId))
        {
            return _categories.First(p => p.Id == _selectedCategoryId).Name;
        }

        return null;
    }

    void ExportCategory()
    {

    }

    void ExportAllCategories() {

    }

    async Task ExportLeaderboard()
    {
        try
        {
            var exportReq = await _exportService.ExportCompetitionLeaderboard(CompetitionId);

            if (exportReq.IsError)
            {
                _toastService.ShowErrors(exportReq.Errors);
            } else
            {
                _toastService.ShowSuccess($"Tabla de posiciones exportada correctamente. Puede encontrar el archivo en la carpeta de descargas de su navegador con el nombre {exportReq.Value}");
            }
        } catch (Exception e)
        {
            _logger.LogError(e, "Error exporting leaderboard");
            _toastService.ShowError("Ocurrió un error al exportar la tabla de posiciones");
        }
    }

    async Task OnLeaderboardUpdated(LeaderboardUpdatedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await SearchAsync();

            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        _leaderboardNotificationService.OnLeaderboardWasUpdated -= OnLeaderboardUpdated;
    }


}
