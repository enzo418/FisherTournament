@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard/{CompetitionId}"
@using FisherTournament.Application.Competitions.Queries.GetCompetition;
@using FisherTournament.Application.Competitions.Queries.GetLeaderBoard;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js

<h1 class="page-title-no-pt">Tabla de posiciones de la competencia N° @competition.N</h1>

<div class="mt-7 mb-7 flex flex-row w-full justify-between items-end">
    <div>
        <FluentSelect Items=_categories
                      OptionText="@(i => i.Name)"
                      OptionValue="@(i => i.Id)"
                        @bind-Value="@_selectedCategoryId"
                        @bind-Value:after=SearchAsync>
            <LabelTemplate>
                Categoría
            </LabelTemplate>
        </FluentSelect>
    </div>
    
    <FluentButton 
        Id="btnOpenExport"
        IconEnd="@(new Icons.Regular.Size16.ChevronDown())"
        @onclick="@(() => _openExport = !_openExport)" 
        Appearance="Appearance.Outline">
        Exportar
    </FluentButton>

    <FluentMenu Anchor="btnOpenExport" @bind-Open="_openExport" Class="rounded-md">
        @if (GetCurrentCategoryName() is var catName && !string.IsNullOrEmpty(catName))
        {
            <FluentMenuItem OnClick=ExportCategory Class="gap-x-3.5 flex flex-row pl-2">
                <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size24.Share())" Color="Color.Accent" Slot="start" /></span>
                Exportar categoria "@catName"
            </FluentMenuItem>
            <FluentDivider />
        }
        <FluentMenuItem OnClick=ExportAllCategories Class="gap-x-3.5 flex flex-row pl-2">
            <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size24.Share())" Color="Color.Accent" Slot="start" /></span>
            Exportar todas las categorias
        </FluentMenuItem>
    </FluentMenu>
</div>
@* <FluentDivider class="mt-4 mb-4" />  *@

<FluentDataGrid Items="@positions" Virtualize="true" GridTemplateColumns="0.1fr 0.6fr 0.3fr 0.5fr">
    <ChildContent>
        <PropertyColumn Title="Posición" Property="@(c => c.Position)" />

        <PropertyColumn Title="Nombre" Property="@(c => c.Name)" />

        <PropertyColumn Title="Suma de Puntos" Property="@(c => c.TotalScore)" />

        <TemplateColumn Title="Acciones" Align="@Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size24.Info())"
                          Appearance="Appearance.Stealth"
                          OnClick="@(() => OpenDetails(context))"> 
                          Detalles
            </FluentButton>
        </TemplateColumn>
    </ChildContent>

    <EmptyContent>
        <div Style="min-height: 300px;" class="flex items-center empty-content pt-2">
            <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
            &nbsp; No hay posiciones registradas para esta competición
        </div>
    </EmptyContent>
</FluentDataGrid>

@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    [Parameter]
    public string CompetitionId { get; set; } = null!;

    private bool _openExport = false;

    List<GetTournamentCategoriesQueryResult> _categories = new();

    IQueryable<LeaderBoardItem> positions = new List<LeaderBoardItem>().AsQueryable();

    private List<LeaderBoardCategory> lastQuery = new();

    string _selectedCategoryId = "";

    GetCompetitionQueryResponse competition = default!;

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        // Get competition
        var competitionQuery = new GetCompetitionQuery(CompetitionId);
        var competitionRes = await _sender.Send(competitionQuery);

        if (competitionRes.IsError)
        {
            _toastService.ShowErrors(competitionRes.Errors);
            shouldExit = true;
        } else
        {
            competition = competitionRes.Value;
        }


        // Get tournament categories
        var query = new GetTournamentCategoriesQuery(TournamentId);
        var categoriesRes = await _sender.Send(query);

        if (categoriesRes.IsError)
        {
            _toastService.ShowErrors(categoriesRes.Errors);
            shouldExit = true;
        } else
        {
            _categories = categoriesRes.Value.ToList();            
            _selectedCategoryId  = _categories.Count > 0 ? _categories.First().Id : "";
        }

        await SearchAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldExit) _js.GoBack();
    }

    async Task SearchAsync()
    {
        var query = new GetCompetitionLeaderBoardQuery(CompetitionId);
        var res = await _sender.Send(query);

        if (res.IsError)
        {
            _toastService.ShowErrors(res.Errors);
        } else
        {
            lastQuery = res.Value.ToList();

            if (res.Value.Any(p => p.Id == _selectedCategoryId))
            {
                positions = res.Value.First(p => p.Id == _selectedCategoryId).LeaderBoard.AsQueryable();
            }
        }
    }

    void OpenDetails(LeaderBoardItem position)
    {
        _toastService.ShowInfo($"Abriendo detalles de {position.Name}");
    }

    string? GetCurrentCategoryName()
    {
        if (_categories.Any(p => p.Id == _selectedCategoryId))
        {
            return _categories.First(p => p.Id == _selectedCategoryId).Name;
        }

        return null;
    }

    void ExportCategory()
    {
        
    }

    void ExportAllCategories() {

    }


}
