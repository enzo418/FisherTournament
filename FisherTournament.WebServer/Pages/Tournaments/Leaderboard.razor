@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard"
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentLeaderBoard;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js

<h1 class="page-title-no-pt">Tabla de posiciones del torneo</h1>

<div class="mt-7 mb-7 flex flex-row w-full justify-between items-end">
    <div class="flex flex-row gap-x-2">
        <div>
            <FluentSelect Items=_categories
                            OptionText="@(i => i.Name)"
                            OptionValue="@(i => i.Id)"
                            @bind-Value="@_selectedCategoryId"
                            @oninput="OnSelectedCategoryAsync">
                <LabelTemplate>
                    Categoría
                </LabelTemplate>
            </FluentSelect>
        </div>

        <div class="ml-3">
            <FluentSelect TOption="string" @bind-Value="@SelectedCompetition"
                          @oninput="OnSelectedCompetitionAsync">
                <LabelTemplate>
                    Competición
                </LabelTemplate>

                <ChildContent>
                    <FluentOption Value="Todas">Todas las competencias</FluentOption>
                    
                    @foreach (var competencia in competencias)
					{
						<FluentOption Value="@competencia.N.ToString()">N° @competencia.N</FluentOption>
					}
                </ChildContent>
            </FluentSelect>
        </div>

    </div>
    <FluentButton IconStart="@(new Icons.Regular.Size16.Share())" Appearance="Appearance.Outline">Exportar</FluentButton>
</div>
@* <FluentDivider class="mt-4 mb-4" />  *@

 <FluentDataGrid Items="@positions" GridTemplateColumns="0.1fr 0.6fr 0.3fr 0.5fr">
    <ChildContent>
        <PropertyColumn Title="Posición" Property="@(c => c.Position)" />

        <PropertyColumn Title="Nombre" Property="@(c => c.Name)" />

        <PropertyColumn Title="Suma de posiciones" Property="@(c => c.CompetitionPositions.Sum())" />

        <TemplateColumn Title="Acciones" Align="@Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size24.Info())"
                          Appearance="Appearance.Stealth"
                          OnClick="@(() => OpenDetails(context))"> 
                          Detalles
            </FluentButton>
        </TemplateColumn>
    </ChildContent>

    <EmptyContent>
        <div Style="min-height: 300px;" class="empty-content">
            <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
            &nbsp; No hay posiciones registradas para esta competición
        </div>
    </EmptyContent>
</FluentDataGrid>

@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    record struct Competencia(int Id, int N);
    List<Competencia> competencias = new();

    public record struct Category(string Id, string Name);
    List<Category> _categories = new();

    record struct Position(int Pos, string Name, int Total);
    IQueryable<TournamentLeaderBoardItem> positions = new List<TournamentLeaderBoardItem>().AsQueryable();
    List<TournamentLeaderBoardCategory> _lastRequest = new();

    string _selectedCategoryId = "General";

    string SelectedCompetition = "Todas las competiciones";

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        await FetchLeaderboard();
    }

    async Task FetchLeaderboard()
    {
        var query = new GetTournamentLeaderBoardQuery(TournamentId);
        var result = await _sender.Send(query);

        if (result.IsError)
        {
            _toastService.ShowErrors(result.Errors);
            shouldExit = true;
            return;
        }

        _lastRequest = result.Value.ToList();

        _categories = result.Value.Select(c => new Category(c.Id, c.Name)).ToList();
    }

    void SetRendedContent()
    {
        if (string.IsNullOrEmpty(_selectedCategoryId)) return;

        if (!_lastRequest.Any(c => c.Id == _selectedCategoryId)) return;

        positions = _lastRequest.Where(c => c.Id == _selectedCategoryId).First().LeaderBoard.AsQueryable();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldExit) await _js.GoBack();
    }

    async Task OnSelectedCategoryAsync(ChangeEventArgs e)
    {
        _selectedCategoryId = e.Value?.ToString();

        SetRendedContent();
    }

    async Task OnSelectedCompetitionAsync()
    {
        _toastService.ShowInfo($"Cambiando a competencia {SelectedCompetition}");
        await Task.CompletedTask;
    }

    void OpenDetails(TournamentLeaderBoardItem position)
    {
        _toastService.ShowInfo($"Abriendo detalles de {position.Name}");
    }
}
