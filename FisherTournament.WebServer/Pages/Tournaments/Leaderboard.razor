@layout TournamentLayout
@page "/tournament/{TournamentId}/leaderboard"
@using FisherTournament.Application.Tournaments.Queries.GetTournamentCategories;
@using FisherTournament.Application.Tournaments.Queries.GetTournamentLeaderBoard;
@using FisherTournament.Application.Competitions.Queries.GetTournamentCompetitions;
@using FisherTournament.WebServer.Services.ExportLeaderboard;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using FisherTournament.WebServer.Pages.Tournaments.Dialog;
@using System.Diagnostics;

@implements IDisposable

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IDialogService _dialogService
@inject LeaderboardNotificationService _notificationService
@inject ExportLeaderboardService _exportService
@inject ILogger<Leaderboard> _logger


<h1 class="page-title-no-pt">Tournament <span style="color: var(--accent-fill-rest);">Leaderboard</span></h1>

<div class="mt-7 mb-7 flex flex-row w-full justify-between items-end">
    <div class="flex flex-row gap-x-2">
        <div>
            <FluentSelect Items=_categories
                          OptionText="@(i => i.Name)"
                          OptionValue="@(i => i.Id)"
            @bind-Value="@_selectedCategoryId"
            @oninput="OnSelectedCategoryAsync">
                <LabelTemplate>
                    Category
                </LabelTemplate>
            </FluentSelect>
        </div>

        <FluentDivider Orientation="Orientation.Vertical" />

        <ScrollerGoToCompetition Class="ml-3" TournamentId=@TournamentId />
    </div>
    <FluentButton IconStart="@(new Icons.Regular.Size16.Share())" OnClick="ExportLeaderboard" Appearance="Appearance.Outline">Export</FluentButton>
</div>
@* <FluentDivider class="mt-4 mb-4" />  *@

<div style="height: calc(100% - 200px); overflow-y: scroll;">
    <FluentDataGrid Items="@positions" Virtualize="true" ItemSize="50" GridTemplateColumns="0.1fr 0.6fr 0.3fr 0.5fr">
        <ChildContent>
            <PropertyColumn Title="Position" Property="@(c => c.Position)" />

            <PropertyColumn Title="Name" Property="@(c => c.Name)" />

            <PropertyColumn Title="Sum of positions" Property="@(c => c.CompetitionPositions.Sum())" />

            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton IconStart="@(new Icons.Regular.Size24.Info())"
                              Appearance="Appearance.Stealth"
                              OnClick="@(() => OpenDetails(context))">
                    Details
                </FluentButton>
            </TemplateColumn>
        </ChildContent>

        <EmptyContent>
            <div Style="min-height: 300px;" class="flex items-center empty-content pt-2">
                <FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
                &nbsp; No positions registered in the tournament
            </div>
        </EmptyContent>
    </FluentDataGrid>
</div>

@code {
    [Parameter]
    public string TournamentId { get; set; } = null!;

    record struct Competition(string Id, int N);
    List<Competition> competitions = new();

    public record struct Category(string Id, string Name);
    List<Category> _categories = new();

    record struct Position(int Pos, string Name, int Total);
    IQueryable<TournamentLeaderBoardItem> positions = new List<TournamentLeaderBoardItem>().AsQueryable();
    List<TournamentLeaderBoardCategory> _lastRequest = new();

    string _selectedCategoryId = "";

    string SelectedCompetition = "All competitions";

    private bool shouldExit = false;

    protected async override Task OnInitializedAsync()
    {
        await FetchLeaderboard();

        if (_categories.Count > 0)
        {
            if (_categories.Any(c => c.Name == "General"))
            {
                _selectedCategoryId = _categories.First(c => c.Name == "General").Id;
            } else _selectedCategoryId = _categories.First().Id;

            SetRenderedContent();
        }

        await FetchTournamentCompetitions();

        _notificationService.OnLeaderboardWasUpdated += OnLeaderboardUpdated;
    }

    void IDisposable.Dispose()
    {
        _notificationService.OnLeaderboardWasUpdated -= OnLeaderboardUpdated;
    }

    async Task FetchLeaderboard()
    {
        var query = new GetTournamentLeaderBoardQuery(TournamentId);
        var result = await _sender.Send(query);

        if (result.IsError)
        {
            _toastService.ShowErrors(result.Errors);
            shouldExit = true;
            return;
        }

        _lastRequest = result.Value.ToList();

        _categories = result.Value.Select(c => new Category(c.Id, c.Name)).ToList();
    }

    async Task FetchTournamentCompetitions()
    {
        var query = new GetTournamentCompetitionsQuery(TournamentId);
        var result = await _sender.Send(query);

        if (result.IsError)
        {
            _toastService.ShowErrors(result.Errors);
            shouldExit = true;
            return;
        }

        competitions = result.Value.Select(c => new Competition(c.Id, c.N)).ToList();

    }

    void SetRenderedContent()
    {
        if (string.IsNullOrEmpty(_selectedCategoryId)) return;

        if (!_lastRequest.Any(c => c.Id == _selectedCategoryId)) return;

        positions = _lastRequest.Where(c => c.Id == _selectedCategoryId).First().LeaderBoard.AsQueryable();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldExit) await _js.GoBack();
    }

    Task OnSelectedCategoryAsync(ChangeEventArgs e)
    {
        _selectedCategoryId = e.Value?.ToString();

        SetRenderedContent();

        return Task.CompletedTask;
    }

    async Task OnSelectedCompetitionAsync()
    {
        _toastService.ShowInfo($"Switching to competition {SelectedCompetition}");
        await Task.CompletedTask;
    }

    async Task OpenDetails(TournamentLeaderBoardItem position)
    {
        var dialog = await _dialogService.ShowDialogAsync<TournamentLeaderboardItemDetails>(position, new DialogParameters()
            {
                Width = "90%",
                PrimaryAction = null,
                SecondaryAction = null
            });
    }

    void GoToCompetition(Competition competition)
    {
        _nav.NavigateTo($"/tournament/{TournamentId}/leaderboard/{competition.Id}");
    }

    async Task OnLeaderboardUpdated(LeaderboardUpdatedEventArgs e)
    {
        if (e.TournamentId != TournamentId) return;

        await InvokeAsync(async () =>
        {
            await FetchLeaderboard();

            SetRenderedContent();

            StateHasChanged();
        });
    }

    void ExportLeaderboard()
    {
        _toastService.ShowWarning("Cannot export, it's a demo.");
    }
}
