@page "/tournaments"

@inject NavigationManager _nav

<div class="flex flex-row w-full items-center justify-between mb-4">
	<h1 class="page-title">Torneos/Fechas</h1>

	<FluentButton OnClick="@(() => _nav.NavigateTo("/tournament/_demo"))"
					IconStart="@(new Icons.Regular.Size16.AddCircle())" 
					Appearance="Appearance.Accent">
		Agregar Torneo
	</FluentButton>
</div>


<FluentLabel Typo="Typography.H3">En curso</FluentLabel>
<FluentDivider class="mt-1" />

@foreach (var torneo in OngoingTournaments)
{
	<FluentCard class="flex flex-col w-full mt-4 h-fit pt-2.5 px-4">
		<div class="flex flex-row">
			@* <FluentLabel Class="pt-2.5" Typo="Typography.H6" Color="Color.Disabled">Torneo: </FluentLabel> *@

			<div class="flex flex-row w-full items-center">
				<FluentLabel Typo="Typography.H4">@torneo.Name</FluentLabel>
				<FluentNavLink Href="@("/tournament/"+torneo.TournamentId)" Class="flex gap-x-2">
					Ir al torneo
					<FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" Class="align-middle" />
				</FluentNavLink>
			</div>
		</div>

		<div class="flex flex-row pt-2.5">
			<FluentLabel Class="whitespace-nowrap pr-3" Typo="Typography.H6" Color="Color.Accent">Fecha Inicio del torneo: </FluentLabel>

			<div class="flex flex-row w-full items-center">
				<FluentLabel Typo="Typography.Body">@torneo.StartDate.ToString("dd/MM/yyyy")</FluentLabel>
			</div>
		</div>

		<FluentLabel Class="pt-2.5" Typo="Typography.H6" Color="Color.Accent">Fechas del torneo en curso</FluentLabel>

		<div class="flex flex-row w-full gap-4">
			<table class="w-full mt-1">
				<tr class="mb-2 h-8">
					<th class="w-1/3">N°</th>
					<th class="w-1/3">Fecha Inicio</th>
					<th class="w-1/3"></th>
				</tr>
				@foreach (var competencia in torneo.Competitions.Where(c => c.EndDate is null))
				{
					<tr>
						<td>@competencia.N</td>
						<td>@competencia.StartDate.ToString("dd/MM/yyyy")</td>
						<td>
							<FluentNavLink  
								Class="flex gap-x-2 underline w-full justify-center" 
								Href="@("/tournament/"+torneo.TournamentId+"/leaderboard/"+competencia.CompetitionId)"
								Style="color: var(--accent-fill-rest);">
								Posiciones
								<FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" Class="align-middle" />
							</FluentNavLink>
						</td>
					</tr>
				}
			</table>
		</div>
	</FluentCard>
}


<FluentLabel Typo="Typography.H3" Class="pt-7">Buscar fecha</FluentLabel>
<FluentDivider class="mb-4" />

<div class="flex flex-row w-full justify-center gap-10 mb-4">
	<div>
		<FluentSelect
			Items="@(Enumerable.Range(DateTime.Now.Year-5, 6))"
			@bind-Value="SelectedYear"
			OptionText="@(i => i.ToString())" 
			OptionValue="@(i => i.ToString())" 
			@oninput=SearchByYearAsync>
			<LabelTemplate>
				Año del torneo
			</LabelTemplate>
		</FluentSelect>
	</div>

	<FluentNumberField @oninput=SearchByNumberAsync TValue="int">
		<div slot="start">N°</div> Número de la fecha
	</FluentNumberField>
</div>

<FluentDataGrid @ref="fluentDataGrid"
				ItemsProvider="itemsProviderCall"
				TGridItem="CompetitionTournamentSummary"
				Pagination="@pagination"
				GridTemplateColumns="0.15fr 0.4fr 0.3fr 0.3fr">
	<ChildContent>
		<PropertyColumn Property="@(p => p.N)" Sortable="false" Title="N°" />
		<PropertyColumn Property="@(p => p.TournamentName)" Sortable="false" Title="Nombre del torneo" />
		<PropertyColumn Property="@(p => p.StartDate)" Format="dd/MM/yyyy" Sortable="false" Title="Inicio de la fecha" />
		<PropertyColumn Property="@(p => p.EndDate)" Format="dd/MM/yyyy" Sortable="false" Title="Fin de la fecha" />
		<TemplateColumn Title="Acciones" Align="@Align.End">
			<FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowRight())" OnClick="@(() => GoToTournament(context))" />
		</TemplateColumn>
	</ChildContent>

	<EmptyContent>
		<div Style="min-height: 300px;" class="empty-content">
			<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
			&nbsp; No se encontraron pescadores.
		</div>
	</EmptyContent>
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@code {
	record struct CompetitionSummary(string CompetitionId, int N, DateTime StartDate, DateTime? EndDate);
	record struct TournamentSummary(string TournamentId, string Name, DateTime StartDate, DateTime? EndDate, IEnumerable<CompetitionSummary> Competitions);

	List<TournamentSummary> OngoingTournaments = new()
	{
		new TournamentSummary("1", "Marsupial", new DateTime(2023, 8, 1), null, new List<CompetitionSummary>()
		{
			new CompetitionSummary("1", 1, new DateTime(2023, 8, 1), new DateTime(2023, 8, 1)),
			new CompetitionSummary("2", 2, new DateTime(2023, 8, 6), new DateTime(2023, 8, 6)),
			new CompetitionSummary("3", 3, new DateTime(2023, 8, 15), new DateTime(2023, 8, 15)),
			new CompetitionSummary("4", 4, new DateTime(2023, 8, 20), new DateTime(2023, 8, 20)),
			new CompetitionSummary("5", 5, DateTime.Now, null),
		}),
		new TournamentSummary("2", "Cangrejo", new DateTime(2023, 9, 1), null, new List<CompetitionSummary>()
		{
			new CompetitionSummary("1", 1, new DateTime(2023, 9, 1), new DateTime(2023, 9, 1)),
			new CompetitionSummary("2", 2, new DateTime(2023, 9, 6), new DateTime(2023, 9, 6)),
			new CompetitionSummary("3", 3, new DateTime(2023, 9, 15), new DateTime(2023, 9, 15)),
			new CompetitionSummary("4", 4, new DateTime(2023, 9, 20), new DateTime(2023, 9, 20)),
			new CompetitionSummary("5", 5, DateTime.Now, null),
		}),
	};

	string SelectedYear = DateTime.Now.Year.ToString();
	private string _selectedYear = DateTime.Now.Year.ToString();
	private int? _selectedNumber;

	record struct CompetitionTournamentSummary(string CompetitionId, string TournamentName, int N, DateTime StartDate, DateTime? EndDate);

	GridItemsProvider<CompetitionTournamentSummary> itemsProviderCall = default!;
	PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
	FluentDataGrid<CompetitionTournamentSummary> fluentDataGrid = default!;

	protected override void OnInitialized()
	{
		itemsProviderCall = async req =>
		{
			int _selectedYear_int = int.Parse(_selectedYear);

			if (_selectedNumber is null)
			{
				// Mock data for now
				var competitions = new List<CompetitionTournamentSummary>()
				{
					new CompetitionTournamentSummary("1", "Marsupial", 1, new DateTime(_selectedYear_int, 8, 1), new DateTime(_selectedYear_int, 8, 1)),
					new CompetitionTournamentSummary("2", "Marsupial", 2, new DateTime(_selectedYear_int, 8, 6), new DateTime(_selectedYear_int, 8, 6)),
					new CompetitionTournamentSummary("3", "Marsupial", 3, new DateTime(_selectedYear_int, 8, 15), new DateTime(_selectedYear_int, 8, 15)),
					new CompetitionTournamentSummary("4", "Marsupial", 4, new DateTime(_selectedYear_int, 8, 20), new DateTime(_selectedYear_int, 8, 20)),
					new CompetitionTournamentSummary("5", "Marsupial", 5, DateTime.Now, null),
					new CompetitionTournamentSummary("6", "Cangrejo", 1, new DateTime(_selectedYear_int, 9, 1), new DateTime(_selectedYear_int, 9, 1)),
					new CompetitionTournamentSummary("7", "Cangrejo", 2, new DateTime(_selectedYear_int, 9, 6), new DateTime(_selectedYear_int, 9, 6)),
					new CompetitionTournamentSummary("8", "Cangrejo", 3, new DateTime(_selectedYear_int, 9, 15), new DateTime(_selectedYear_int, 9, 15)),
					new CompetitionTournamentSummary("9", "Cangrejo", 4, new DateTime(_selectedYear_int, 9, 20), new DateTime(_selectedYear_int, 9, 20)),
					new CompetitionTournamentSummary("10", "Cangrejo", 5, DateTime.Now, null),					
				};

				return GridItemsProviderResult.From(
					items: competitions,
					totalItemCount: competitions.Count
				);
			} else {
				// Mock data for now
				var competitions = new List<CompetitionTournamentSummary>()
				{
					new CompetitionTournamentSummary("1", "Marsupial", _selectedNumber.Value, new DateTime(_selectedYear_int, 8, 1), new DateTime(_selectedYear_int, 8, 1)),
					new CompetitionTournamentSummary("6", "Cangrejo", _selectedNumber.Value, new DateTime(_selectedYear_int, 9, 1), new DateTime(_selectedYear_int, 9, 1)),
				};

				return GridItemsProviderResult.From(
					items: competitions,
					totalItemCount: competitions.Count
				);
			}
		};
	}

	Task SearchByYearAsync(ChangeEventArgs e)
	{
		_selectedYear = e.Value?.ToString() ?? string.Empty;
		return fluentDataGrid.RefreshDataAsync();
	}

	Task SearchByNumberAsync(ChangeEventArgs e)
	{
		if (Int32.TryParse((string?)e.Value, out var res))
		{
			_selectedNumber = res;
			return fluentDataGrid.RefreshDataAsync();
		} else {
			_selectedNumber = null;
			return fluentDataGrid.RefreshDataAsync();
		}
	}

	void GoToTournament(CompetitionTournamentSummary s)
	{
		
	}

}
