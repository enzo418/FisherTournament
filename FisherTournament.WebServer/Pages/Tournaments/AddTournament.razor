@layout MainLayout
@page "/tournaments/add"

@inject IJSRuntime _js
@inject NavigationManager _nav
@inject ISender _sender
@inject IMapper _mapper

@using FisherTournament.Application.Tournaments.Commands.CreateTournament;
@using FisherTournament.Contracts.Tournaments;
@using Microsoft.Fast.Components.FluentUI;

<div class="px-4" style="width: 98%">
    <h1 class="page-title">Crear torneo</h1>

    <EditForm EditContext="@editContext" OnSubmit="@Submit" class="flex flex-col items-center justify-between h-full w-full mt-4">
        <FluentGrid Spacing="3" Justify="JustifyContent.Center">
            <FluentGridItem sm="12" md="5">
                <p>
                    <FluentTextField Required="true" AutoComplete="off" Autofocus="true" @bind-Value="@Model.Name" class="w-full">
                        Nombre del torneo <span class="red">*</span>
                    </FluentTextField>
                    <ValidationMessage For="() => Model!.Name" />
                </p>
            </FluentGridItem>
            <FluentGridItem sm="12" md="5">
                <p>
                    <FluentDatePicker class="w-full" Required="true" @bind-Value=StartDate AriaLabel="Fecha inicio" Label="Fecha inicio" />
                    <ValidationMessage For="() => Model!.StartDate" />
                </p>
            </FluentGridItem>
        </FluentGrid>

        <div class="m-auto flex mt-7 columns-2 gap-28 w-full place-content-center">
            <FluentButton Appearance="Appearance.Stealth" @onclick=CancelAsync>@(editContext.IsModified() ? "Cancelar" : "Volver")</FluentButton>
            <FluentButton Type=ButtonType.Submit Appearance="Appearance.Accent" Disabled=!editContext.IsModified()>Continuar</FluentButton>
        </div>
    </EditForm>
</div>


@code {
    private bool Finished = false;

    private CreateTournamentRequest Model { get; set; } = default!;
    private EditContext editContext = default!;
    private ValidationMessageStore? messageStore;

    private DateTime? StartDate = DateTimeOffset.Now.LocalDateTime;

    private bool _sending = false;

    protected override void OnInitialized()
    {
        Model = new("", DateTimeOffset.Now.LocalDateTime, null);
        editContext = new(Model);
        messageStore = new(editContext);
    }

    private async Task CancelAsync()
    {
        await _js.GoBack();
    }

    private async Task Submit()
    {
        if (_sending) return;

        _sending = true;

        if (StartDate is not null)
        {
            Model.StartDate = StartDate.Value.ToUniversalTime();
        } else
        {
            var fieldIdentifier = new FieldIdentifier(Model, nameof(Model.StartDate));
            messageStore?.Add(fieldIdentifier, "Fecha invalida");

            editContext?.NotifyValidationStateChanged();

            return;
        }

        if (!editContext.Validate() || !editContext.IsModified()) return;


        var mapped = _mapper.Map<CreateTournamentCommand>(Model);
        
        Model = new("", DateTimeOffset.Now.LocalDateTime, null);
        
        var response = await _sender.Send(mapped);

        if (response.IsError)
        {
            editContext.AddValidationErrors(response.Errors, messageStore, Model);
        } else
        {
            _nav.NavigateTo("/tournament/"+response.Value.Id);
        }

        _sending = false;
    }
}