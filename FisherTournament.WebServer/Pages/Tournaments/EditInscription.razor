@layout TournamentLayout
@page "/tournament/{TournamentId}/inscription/{InscriptionId}"

@using FisherTournament.Application.Fishers.Queries;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender

<h1 class="page-title-no-pt">Editar Inscripción</h1>

<p class="m-0 color-fg">Pescador</p>
<FluentDivider class="mt-1 mb-4" />

<div class="flex flex-col items-center">
	<FluentCard class="mt-4" style="height:100px;width:500px">
		<div class="flex flex-row justify-evenly items-center w-full h-full gap-14">
			<div class="flex flex-col gap-2">
				<div>
					<span class="color-fg font-bold">Nombre</span>
					<span class="color-fg">@(persona.Name)</span>
				</div>

				<div>
					<span class="color-fg font-bold">DNI</span>
					<span class="color-fg">@persona.DNI</span>
				</div>
			</div>

			<p style="color: var(--accent-fill-rest);">
				@* <FluentIcon Value="@(new Icons.Regular.Size24.Checkmark())" /> *@
				Seleccionado
			</p>
		</div>
	</FluentCard>
</div>

<p class="m-0 mt-16 color-fg">Selecciona la categoría e ingresa el número</p>
<FluentDivider class="mt-1 mb-4" />

<div class="flex flex-row justify-evenly w-full">
	<div>
		<FluentSelect Items=cats
		OptionText="@(i => i.Name)"
		OptionValue="@(i => i.Name)"
		@bind-Value="@_selectedCategoryId">
			<LabelTemplate>
				Categoría <span class="red">*</span>

			</LabelTemplate>
		</FluentSelect>
	</div>

	<FluentNumberField @bind-Value=_selectedNumber Required="true">
		Número <span class="red">*</span>
	</FluentNumberField>
</div>


<div class="mt-6 flex flex-row w-full justify-center gap-24">
	<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Cancelar</FluentButton>
	<FluentButton 
			IconStart="@(new Icons.Regular.Size16.Checkmark())" 
			Appearance="Appearance.Accent">Guardar</FluentButton>
</div>


@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	[Parameter]
	public string InscriptionId { get; set; } = null!;

	record struct Persona(string Id, string Name, string DNI);
	record struct Cat(int Id, string Name, int minAge, int MaxAge);
	record struct TournamentInscription(int Id, string FisherId, int CategoryId);

	TournamentInscription inscription;
	Persona persona;
	string _selectedCategoryId = string.Empty;
	int _selectedNumber;

	List<Cat> cats = new()
	{
		new Cat(1, "Menores", 0, 17),
		new Cat(2, "Mayores", 18, 99),
	};

	void Cancel()
	{
	}

	protected override async Task OnInitializedAsync()
	{
		// TODO: Get inscription data
		inscription = new(1, "1", 1);
		persona = new("1", "Juan Perez", "12345678");
		_selectedCategoryId = cats.FirstOrDefault(c => c.Id == inscription.CategoryId, cats.First()).Id.ToString();


		await Task.CompletedTask;
	}
}