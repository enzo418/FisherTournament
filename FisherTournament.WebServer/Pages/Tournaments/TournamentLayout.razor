@inherits LayoutComponentBase
@using FisherTournament.Application.Tournaments.Queries.GetTournament;
@using Microsoft.Fast.Components.FluentUI;
@using Microsoft.Fast.Components.FluentUI.DesignTokens

@inject NavigationManager Navigation
@inject GlobalState GlobalState
@inject BaseLayerLuminance BaseLayerLuminance
@inject ISender _sender

@layout MainLayout

<FluentLayout Class="h-full">
    <FluentStack Orientation="Orientation.Horizontal" Width="100%" Class="h-full" Style="padding-right: 15px; background-color: var(--neutral-layer-1);">
        <div style="color: var(--neutral-foreground-rest);background-color: var(--neutral-layer-2)" class="h-full pt-6 pl-3 pr-3">
            <FluentLabel Typo="Typography.H3" Class="text-center pb-2" Style="color: var(--neutral-stroke-strong-active);text-wrap: wrap; max-width: 300px;">@_tournamentName</FluentLabel>
            <FluentNavMenu @ref="@_navMenu" id="nav-tournament" Width="300">
                <FluentNavLink Match=NavLinkMatch.All Icon="@(new Icons.Regular.Size24.Home())" Href=@($"/tournament/{TournamentId}")>General Information</FluentNavLink>
                <FluentNavLink Icon="@(new Icons.Regular.Size24.PeopleList())" Href=@($"/tournament/{TournamentId}/categories")>Categories</FluentNavLink>
                <FluentNavGroup Title="Inscriptions" Icon="@(new Icons.Regular.Size24.People())" Expanded=true>
                    <FluentNavLink Icon="@(new Icons.Regular.Size24.PeopleAdd())" Href=@($"/tournament/{TournamentId}/add/inscription")>Add Inscription</FluentNavLink>
                    <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAgenda())" Href=@($"/tournament/{TournamentId}/inscriptions")>View Inscriptions</FluentNavLink>
                </FluentNavGroup>
                <FluentNavGroup Title="Competitions" Icon="@(new Icons.Regular.Size24.CalendarDate())" Expanded=true>
                    <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAdd())" Href=@($"/tournament/{TournamentId}/add/competition")>Add Competition</FluentNavLink>
                    <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarAgenda())" Href=@($"/tournament/{TournamentId}/competitions")>View Competitions</FluentNavLink>
                </FluentNavGroup>
                <FluentNavLink Icon="@(new Icons.Regular.Size24.CalendarMultiple())" Href=@($"/tournament/{TournamentId}/leaderboard")>Leaderboard</FluentNavLink>
                <FluentNavLink Icon="@(new Icons.Regular.Size24.FoodFish())" Href=@($"/tournament/{TournamentId}/add/score")>Add Score</FluentNavLink>
            </FluentNavMenu>
        </div>

        @* <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Separator" /> *@

        <CascadingValue Value="@ChangedTournamentName">
            <FluentBodyContent Class="pl-7 h-full pt-6" Style="overflow: visible !important; background-color: var(--neutral-layer-1)">
                @Body
            </FluentBodyContent>
        </CascadingValue>
    </FluentStack>
</FluentLayout>

@code {
    private string TournamentId = null!;

    private string _tournamentName = "Tournament";
    public Action<string> ChangedTournamentName { get; private set; } = null!;

    private FluentNavMenu? _navMenu;

    private float _lastLuminanceValue = -418;

    private string Style = "background-color: transparent !important;";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ChangedTournamentName = (name) =>
        {
            _tournamentName = name;
            StateHasChanged();
        };

        var uri = new Uri(Navigation.Uri);
        var segments = uri.Segments;

        if (segments.Length >= 3)
        {
            TournamentId = segments[2].TrimEnd('/');
        }else{
            TournamentId = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_tournamentName == "Tournament")
        {
            var res = await _sender.Send(new GetTournamentQuery(TournamentId));

            if (!res.IsError)
            {
                var tournament = res.Value;
                _tournamentName = tournament.Name;

                await InvokeAsync(StateHasChanged);
            }
        }
    }
}