@layout TournamentLayout

@page "/tournaments/competitions"
@using System.Globalization;

@inject IToastService _toastService
@inject IDialogService _dialogService
@inject NavigationManager _nav
@inject ISender _sender

<FluentGrid>
    <FluentGridItem sm="12" md="6">
        <h1 class="page-title-no-pt">Competiciones</h1>
    </FluentGridItem>

    <FluentGridItem sm="12" md="6" Class="flex justify-end">
        <FluentButton Appearance="Appearance.Accent"
                      IconStart="@(new Icons.Regular.Size16.Add())"
                      OnClick="@(() => _nav.NavigateTo("/tournaments/competition"))">Agregar Competición</FluentButton>
    </FluentGridItem>
</FluentGrid>

<FluentDataGrid Items="@competitions" GridTemplateColumns="0.2fr 0.6fr 0.6fr 1fr">
	<ChildContent>
		<PropertyColumn Title="N°" Property="@(c => c.N)" />

		<PropertyColumn Title="Fecha Inicio" Property="@(c => c.StartDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" />

		<PropertyColumn Title="Fecha Fin" Property="@(c => c.EndDate)" Format="@CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern" />

		<TemplateColumn Title="Acciones">
			@(context.Location.Place + ", " + context.Location.City + ", " + context.Location.State + ", " + context.Location.Country)
		</TemplateColumn>

		<TemplateColumn Title="Acciones" Align="@Align.End">
			<FluentButton Class="underline"
				Appearance="Appearance.Lightweight"
				IconEnd="@(new Icons.Regular.Size16.Open())" 
				OnClick="@(() => GoToPositions(context))">Posiciones</FluentButton>
			<FluentButton
						  IconEnd="@(new Icons.Regular.Size24.Edit())"
						  OnClick="@(() => Edit(context))" />
			<FluentButton
				IconEnd="@(new Icons.Regular.Size24.Delete().WithColor("red"))" 
				OnClick="@(() => Delete(context))" />
		</TemplateColumn>
	</ChildContent>

	<EmptyContent>
		<div Style="min-height: 300px;" class="empty-content">
			<FluentIcon Icon="Icons.Regular.Size24.Warning" Color="@Color.Accent" />
			&nbsp; Todavía no hay competiciones.
		</div>
	</EmptyContent>
</FluentDataGrid>

@code {
	public record struct CompetitionLocation(string City, string State, string Country, string Place);

	record struct Competition(string Id, int N, DateTime StartDate, DateTime EndDate, CompetitionLocation Location);

	IQueryable<Competition> competitions = new Competition[] {
		new Competition("1", 1, DateTime.Now, DateTime.Now.AddDays(9), new CompetitionLocation("Mar del Plata", "Buenos Aires", "Argentina", "Playa Grande")),
		new Competition("2", 2, DateTime.Now.AddDays(12), DateTime.Now.AddDays(16), new CompetitionLocation("Mar del Plata", "Buenos Aires", "Argentina", "Playa Grande")),
		new Competition("3", 3, DateTime.Now.AddDays(20), DateTime.Now.AddDays(23), new CompetitionLocation("Mar del Plata", "Buenos Aires", "Argentina", "Playa Grande")),
		new Competition("4", 4, DateTime.Now.AddDays(25), DateTime.Now.AddDays(30), new CompetitionLocation("Mar del Plata", "Buenos Aires", "Argentina", "Playa Grande")),
		new Competition("5", 5, DateTime.Now.AddDays(32), DateTime.Now.AddDays(35), new CompetitionLocation("Mar del Plata", "Buenos Aires", "Argentina", "Playa Grande")),
	}.AsQueryable();

	void Edit(Competition competition)
	{
		_nav.NavigateTo($"/tournaments/competition/{competition.Id}");
	}

	async Task Delete(Competition competition)
	{
		var dialog = await _dialogService.ShowConfirmationAsync(
			$"Eliminar la competición N° {competition.N}?",
			"Eliminar Competición",
			"Eliminar",
			"Cancelar");

		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			_toastService.ShowSuccess($"Eliminada competición N° {competition.N}");
			competitions = competitions.Where(c => c.N != competition.N);
		}
	}

	void GoToPositions(Competition competition)
	{
		_nav.NavigateTo($"/tournaments/leaderboard/{competition.Id}");
	}
}
