@layout TournamentLayout
@page "/tournament/{TournamentId}/add/competition"

@using FisherTournament.Application.Fishers.Queries;
@using FisherTournament.Application.Tournaments.Commands.AddCompetitions;
@using FisherTournament.Contracts.Competitions;
@using FisherTournament.Domain.FisherAggregate.ValueObjects;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Fast.Components.FluentUI;

@inject IToastService _toastService
@inject NavigationManager _nav
@inject ISender _sender
@inject IJSRuntime _js
@inject IMapper _mapper

<EditForm class="relative h-full" OnSubmit="Submit" EditContext="@_editContext">

	<h1 class="page-title-no-pt">Add Competition</h1>

	<CenteredSectionSeparator Class="mt-10 mb-7">Dates</CenteredSectionSeparator>

	<div class="flex flex-col items-center">
		<div>
			<FluentDatePicker @bind-Value="@SelectedDate" Required="true">
				<LabelTemplate>
					Start Date <span class="red">*</span>
				</LabelTemplate>
			</FluentDatePicker>
			<FluentTimePicker @bind-Value="@SelectedDate" Label="" />
			<ValidationMessage For="() => Model!.StartDateTime" />
		</div>
	</div>

	<CenteredSectionSeparator Class="mt-16 mb-7">Competition Location</CenteredSectionSeparator>

	<div class="flex flex-row justify-evenly w-full">
		<div>
			<FluentTextField @bind-Value="@Model.Location.Place" Required="false" AutoComplete="off">
				Address/Place Name
				&nbsp;&nbsp;&nbsp;
				<FluentBadge Appearance="Appearance.Neutral" Fill="lowlight" BackgroundColor="#000" Color="#fff">Optional</FluentBadge>
			</FluentTextField>
			<ValidationMessage For="() => Model!.Location" />
			<ValidationMessage For="() => Model!.Location.Place" />
		</div>
	</div>

	<div class="absolute bottom-0 mb-6 mt-6 flex flex-row w-full justify-center gap-24">
		<FluentButton Appearance="Appearance.Stealth" OnClick="Cancel">Cancel</FluentButton>
		<FluentButton 
				IconStart="@(new Icons.Regular.Size16.Checkmark())" 
				Appearance="Appearance.Accent"
				Disabled="@_saving"
				Type="ButtonType.Submit">Save</FluentButton>
	</div>
</EditForm>

@code {
	[Parameter]
	public string TournamentId { get; set; } = null!;

	AddCompetitionRequest Model { get; set; } = default!;

	private bool _saving = false;

	private DateTime? SelectedDate { 
		get
		{
			return Model.StartDateTime.ToLocalTime();
		}

		set
		{
			if (value is null)  return;

			Model.StartDateTime = value.Value.ToUniversalTime();
		}
	}

	EditContext _editContext = default!;
	ValidationMessageStore _validationMessageStore = default!;

	protected override void OnInitialized()
	{
		Model = new AddCompetitionRequest(DateTime.UtcNow, null, new());
		_editContext = new EditContext(Model);
		_validationMessageStore = new ValidationMessageStore(_editContext);
	}


	void Cancel()
	{
		_js.GoBack();
	}

	async Task Submit()
	{
		if (!_editContext.Validate() || _saving) return;

		_saving = true;
		var command = _mapper.Map<AddCompetitionsCommand>((new AddCompetitionsRequest(new() { Model }), TournamentId));
		var res = await _sender.Send(command);

		if (res.IsError)
		{
			_editContext.AddValidationErrors(res.Errors, _validationMessageStore, Model, _toastService);
		}
		else
		{
			_toastService.ShowSuccess("Competition added");
			await _js.GoBack();
		}
	}
}