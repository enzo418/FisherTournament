@using FisherTournament.WebServer.Common;
@using FisherTournament.WebServer.Services.LeaderboardNotification;
@using Microsoft.Fast.Components.FluentUI.DesignTokens

@namespace FisherTournament.WebServer.Shared

@inherits LayoutComponentBase
@implements IDisposable

@inject BaseLayerLuminance BaseLayerLuminance
@inject GlobalState GlobalState
@inject LeaderboardNotificationService _leaderboardNotificationService
@inject IToastService _toast

<PageTitle>FisherTournament.WebServer</PageTitle>

<div class="page overflow-y-scroll" @ref="container">
    <div class="top-bar">
        <NavMenu OnToggleTheme="@SwitchTheme" IsInDarkMode="@IsInDarkMode" />
    </div>

    <main style="height: calc(100% - 55px);">
        <article class="content h-full">
            @Body
        </article>
        <FluentToastContainer MaxToastCount="10" Timeout=@ToastTimeout RemoveToastsOnNavigation="false" />
        <FluentDialogProvider />
        <FluentTooltipProvider />
    </main>
</div>

@code {
    private const int ToastTimeout = 5;

    StandardLuminance _baseLayerLuminance = StandardLuminance.LightMode;

    private bool IsInDarkMode = false;

    private ThrottleCall _showLeaderBoardUpdateDelted = new(ToastTimeout);

    protected override void OnInitialized()
    {
        _showLeaderBoardUpdateDelted.CallBack += async () =>
        {
            _toast.ShowInfo("Se actualizó la tabla de posiciones");
            await InvokeAsync(StateHasChanged);
        };

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IsInDarkMode = _baseLayerLuminance == StandardLuminance.DarkMode;

            _leaderboardNotificationService.OnLeaderboardWasUpdated += OnLeaderboardUpdated;
        }
        
        base.OnAfterRender(firstRender);
    }

    public async void SwitchTheme()
    {
        IsInDarkMode = !IsInDarkMode;

        await Task.Delay(50);

        if (_baseLayerLuminance == StandardLuminance.LightMode)
            _baseLayerLuminance = StandardLuminance.DarkMode;
        else
            _baseLayerLuminance = StandardLuminance.LightMode;

        await BaseLayerLuminance.SetValueFor(container, _baseLayerLuminance.GetLuminanceValue());

        GlobalState.SetLuminance(_baseLayerLuminance);
    }

    Task OnLeaderboardUpdated(LeaderboardUpdatedEventArgs e)
    {
        _showLeaderBoardUpdateDelted.Call();

        /*_toast.CloseToast("leaderboard-update");

        _toast.ShowConfirmationToast(new ToastParameters<ConfirmationToastContent>()
            {
                Id = "leaderboard-update",
                Intent = ToastIntent.Info,
                Title = "Se actualizó la tabla de posiciones",
                Timeout = 5,
                TopCTAType = ToastTopCTAType.Dismiss,
                TopAction = null,
                OnTopAction = null,
                Icon = (new Icons.Regular.Size20.Info(), Color.Accent)
            });*/
        
         return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _leaderboardNotificationService.OnLeaderboardWasUpdated -= OnLeaderboardUpdated;
    }
}