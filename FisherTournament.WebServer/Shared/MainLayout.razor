@using FisherTournament.WebServer.NotificationServices.Leaderboard;
@using Microsoft.Fast.Components.FluentUI.DesignTokens

@namespace FisherTournament.WebServer.Shared

@inherits LayoutComponentBase
@implements IDisposable

@inject BaseLayerLuminance BaseLayerLuminance
@inject GlobalState GlobalState
@inject LeaderboardNotificationService _leaderboardNotificationService
@inject IToastService _toast

<PageTitle>FisherTournament.WebServer</PageTitle>

<div class="page overflow-y-scroll" @ref="container">
    <div class="top-bar">
        <NavMenu OnToggleTheme="@SwitchTheme" IsInDarkMode="@IsInDarkMode" />
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
        <FluentToastContainer MaxToastCount="10" RemoveToastsOnNavigation="false" />
        <FluentDialogProvider />
    </main>
</div>

@code {
    StandardLuminance _baseLayerLuminance = StandardLuminance.LightMode;

    private bool IsInDarkMode = false;

    protected override void OnInitialized()
    {
        IsInDarkMode = _baseLayerLuminance == StandardLuminance.DarkMode;

        _leaderboardNotificationService.OnLeaderboardWasUpdated += OnLeaderboardUpdated;

        base.OnInitialized();
    }

    public async void SwitchTheme()
    {
        IsInDarkMode = !IsInDarkMode;

        await Task.Delay(50);

        if (_baseLayerLuminance == StandardLuminance.LightMode)
            _baseLayerLuminance = StandardLuminance.DarkMode;
        else
            _baseLayerLuminance = StandardLuminance.LightMode;

        await BaseLayerLuminance.SetValueFor(container, _baseLayerLuminance.GetLuminanceValue());

        GlobalState.SetLuminance(_baseLayerLuminance);
    }

    Task OnLeaderboardUpdated(LeaderboardUpdatedEventArgs e)
    {
        _toast.ShowInfo("Se actualizó la tabla de posiciones");
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _leaderboardNotificationService.OnLeaderboardWasUpdated -= OnLeaderboardUpdated;
    }
}